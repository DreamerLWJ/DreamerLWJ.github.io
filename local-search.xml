<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一起来学Go——CGO极简教程（上）</title>
    <link href="/2022/08/18/Go%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94CGO%20%E6%9E%81%E7%AE%80%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/08/18/Go%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94CGO%20%E6%9E%81%E7%AE%80%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一起来学Go——CGO极简教程（上）"><a href="#一起来学Go——CGO极简教程（上）" class="headerlink" title="一起来学Go——CGO极简教程（上）"></a>一起来学Go——CGO极简教程（上）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文旨在让使用Go语言做开发的同学通过简单的几十分钟至几小时快速掌握 Cgo 的使用，本文将会跳过复杂的底层原理介绍及不常用的功能。本文的内容如下，</p><p>- </p><h2 id="放在前面的故事"><a href="#放在前面的故事" class="headerlink" title="放在前面的故事"></a>放在前面的故事</h2><h3 id="初见-C"><a href="#初见-C" class="headerlink" title="初见 C"></a>初见 C</h3><p>简单和我的朋友们介绍一下我与C&#x2F;C++的爱恨情仇。熟悉我的朋友知道，我是高三学习的 Java，对于我而言 Java 是我进入计算机世界的第一门语言。我是在大一学院开设的“C语言程序设计”这门课上学习到了C语言，那时候我写C语言有一股“OOP的味道”～。</p><p>有了 Java 的基础学习 C 会非常快，那时候我很乐于帮助大家解决程序设计中的各种问题，尤其是“空指针”问题。（如图所示）</p><img src="/2022/08/18/Go%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94CGO%20%E6%9E%81%E7%AE%80%E8%AF%A6%E8%A7%A3/20210302235059216.png" class="" title="C空指针"><p>那时候最让我有成就感的事情就是帮助同学们解决一个又一个 C 语言空指针问题，无论代码长短，无论代码写得怎么样，只要有空指针，我就能快速定位问题并给予解决建议。那段时间也是我非常快乐的时间。</p><h3 id="步入-Android"><a href="#步入-Android" class="headerlink" title="步入 Android"></a>步入 Android</h3><p>大一的时候，由于学 Android 的人比较少，所以当时我加入的项目组基本都有开发 Android App 的需求，于是我在里边写各种各样的 App。</p><p>那时候 Flutter Dart 或 Jetpack Compose 还没有现在那么热门，当时 Android 开发的主要语言就是 Java。但是 Java 的垃圾回收特性无法满足一些需求场景，比如视频流推拉，视频流处理等。当时我在 Android 平台上遇到的两大问题如下，</p><ul><li>尝试用 Java 进行视频转码，帧率高的时候引发 OutOfMemory</li><li>视频流推拉 GC 过于紧张造成 App 卡顿，手机发热，偶尔遇到 OutOfMemory</li></ul><p>当时对于第一个问题，我最后的解决方案是通过编写 C&#x2F;C++ 动态链接库，以及通过 JNI 进行调用。</p><p>对于第二个问题，我直接使用了 bilibili 站开源的 ijkPlayer 解决了，其中用到了开源的动态链接库，给你们看看我当时写的用来控制小车的 App 吧～</p><p>[图片]</p><blockquote><p>ijkPlayer开源地址：<a href="https://github.com/bilibili/ijkplayer.git">https://github.com/bilibili/ijkplayer.git</a></p></blockquote><h3 id="CGO-之旅"><a href="#CGO-之旅" class="headerlink" title="CGO 之旅"></a>CGO 之旅</h3><p>大二开始我就逐渐回到云计算的阵营，主要往后端、区块链方面靠。于是 Android 成为了我手中的“玩具”，如果有人需要我就偶尔拿出来用一下。C&#x2F;C++ 的应用似乎在我的视野中慢慢淡出。</p><blockquote><p>为了不忘记 Android 这门“手艺”，我自己总结了一套敏捷开发方法论，之后抽空写一篇文章会分享大家</p></blockquote><p>最近遇到一些需求，要用 C&#x2F;C++ 来封装一些 Go 的代码，实现加速和技术封装。不仅让我发现 Cgo 这个非常高效的特性，也让我重新拾回了遗落的点滴～，那么废话不说了，开始我们的 CGo 之旅吧！</p><h2 id="CGO-简介"><a href="#CGO-简介" class="headerlink" title="CGO 简介"></a>CGO 简介</h2><p>Cgo 是 Go 语言自带的工具，来支持 C 语言的函数调用。Cgo 的主要目的是兼容 C&#x2F;C++ 庞大的软件资产。相较于其他语言的 C 本地调用功能，譬如 Java 的 JNI，Python 的 ctypes，CGO 具备简单易用的特性。基于它不仅可以轻易实现 Go 调用 C 函数，还能将 Go 函数导出给 C 调用。</p><h2 id="Hello-CGO"><a href="#Hello-CGO" class="headerlink" title="Hello CGO"></a>Hello CGO</h2><p>废话不多说，直接上代码，看一个最简单的 Go 调用 C 的 <code>printf</code> 函数，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">void callPrintf()&#123;</span><br><span class="hljs-comment">   printf(&quot;%d&quot;, 666);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   C.callPrintf()<br>&#125;<br></code></pre></td></tr></table></figure><p>你可以试试看，运行结果如下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wiki">666<br></code></pre></td></tr></table></figure><p>这就是一个最简单的 CGO 示例了，有几个地方需要介绍一下。</p><h3 id="1-import-“C”"><a href="#1-import-“C”" class="headerlink" title="1. import “C”"></a>1. import “C”</h3><p>这是 CGO 的基础语法，是打开跨语言大门的钥匙，任何 Go 与 C 之间的调用、参数转换等等，都需要通过这个导入这个虚拟的包 “C”。</p><p>import “C” 语句需要<strong>独立一行</strong>，不能使用 Go 的批量 import 语句，并且位于它上方的注释，会被当作 C 语言代码，并且 C 语言代码所在的<strong>代码与 import “C” 之间不能够留有空行</strong>。</p><p>注释不一定需要多行注释，单行注释也是可以生效的，如下所示，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">//void callPrintf()&#123;</span><br><span class="hljs-comment">// printf(&quot;%d&quot;, 666);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   C.callPrintf()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><h2 id="链接库"><a href="#链接库" class="headerlink" title="链接库"></a>链接库</h2><h2 id="cgo"><a href="#cgo" class="headerlink" title="#cgo"></a>#cgo</h2><h2 id="Type-Convert"><a href="#Type-Convert" class="headerlink" title="Type Convert"></a>Type Convert</h2><h2 id="思考：CGO-真的比-Go-快吗？"><a href="#思考：CGO-真的比-Go-快吗？" class="headerlink" title="思考：CGO 真的比 Go 快吗？"></a>思考：CGO 真的比 Go 快吗？</h2><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h2 id="令人流泪的坑"><a href="#令人流泪的坑" class="headerlink" title="令人流泪的坑"></a>令人流泪的坑</h2><h3 id="坑-1-——-MACOS-上-Library-not-loaded-xxx-so问题"><a href="#坑-1-——-MACOS-上-Library-not-loaded-xxx-so问题" class="headerlink" title="坑 1 —— MACOS 上 Library not loaded: xxx.so问题"></a>坑 1 —— MACOS 上 Library not loaded: xxx.so问题</h3><p><strong>问题复现</strong></p><p><strong>解决办法</strong></p><p>花了两天时间去多线程寻找解决方案，最后，感谢老外：<a href="https://github.com/ibmdb/go_ibm_db/issues/24">https://github.com/ibmdb/go_ibm_db/issues/24</a></p><p>MacOS 需要配置局部变量 <code>DYLD_LIBRARY_PATH</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run -exec &quot;env DYLD_LIBRARY_PATH=[你的so的位置]&quot; main.go<br></code></pre></td></tr></table></figure><h3 id="坑-2-——-MACOS-上-GCC-的支持问题"><a href="#坑-2-——-MACOS-上-GCC-的支持问题" class="headerlink" title="坑 2 —— MACOS 上 GCC 的支持问题"></a>坑 2 —— MACOS 上 GCC 的支持问题</h3><p>日常感谢老外给我科普了 GCC 在 m1 上的支持问题，</p><p><a href="https://trinhminhchien.com/install-gcc-g-on-macos-monterey-apple-m1/">https://trinhminhchien.com/install-gcc-g-on-macos-monterey-apple-m1/</a></p><p><a href="https://www.phoronix.com/news/GCC-12-Apple-M1-Port-Plan">https://www.phoronix.com/news/GCC-12-Apple-M1-Port-Plan</a></p><p>如果你所使用的 MAC 电脑是 M1，请安装 GCC 12 及以上的版本，而且同时注意 GCC 所依赖的其他包均为 arm64 架构</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>目前找过最好的 CGo 教程：<a href="https://chai2010.cn/advanced-go-programming-book/ch2-cgo/index.html">https://chai2010.cn/advanced-go-programming-book/ch2-cgo/index.html</a></p><p>官方文档：<a href="https://pkg.go.dev/cmd/cgo">https://pkg.go.dev/cmd/cgo</a></p><h3 id="坑-3-——-内存泄漏⚠️"><a href="#坑-3-——-内存泄漏⚠️" class="headerlink" title="坑 3 —— 内存泄漏⚠️"></a>坑 3 —— 内存泄漏⚠️</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/08/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/08/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/test.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/17/hello-world/"/>
    <url>/2022/08/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/01/%E4%BB%A3%E7%A0%81%E4%B8%8E%E8%89%BA%E6%9C%AF%E2%80%94%E2%80%94%E4%BB%8E%20COLA%20%E5%88%B0%E2%80%9C%E6%89%93%E6%89%AB%E5%8E%95%E6%89%80%E2%80%9D%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2022/08/01/%E4%BB%A3%E7%A0%81%E4%B8%8E%E8%89%BA%E6%9C%AF%E2%80%94%E2%80%94%E4%BB%8E%20COLA%20%E5%88%B0%E2%80%9C%E6%89%93%E6%89%AB%E5%8E%95%E6%89%80%E2%80%9D%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="代码与艺术——从-COLA-到“打扫厕所”（上）"><a href="#代码与艺术——从-COLA-到“打扫厕所”（上）" class="headerlink" title="代码与艺术——从 COLA 到“打扫厕所”（上）"></a>代码与艺术——从 COLA 到“打扫厕所”（上）</h1><blockquote><p>公众号：技术小厨师</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是我新开的“代码与艺术”专栏，事实上它和艺术沾不上边，反而是要做一些“打扫厕所的脏活儿”，但是分享的内容可能对防治软件退化有着重要的作用，毕竟及时打扫厕所才不会让厕所臭到不敢有人上厕所。</p><p>本节我分享的主要内容不是 COLA 架构，但是却是我几个月从 COLA 中学习到的治理业务代码的方法，并且我已经在一些项目中将这些方法落地，所得到的成效也是十分显著的。</p><p>COLA 项目访问链接：<a href="https://github.com/alibaba/COLA">https://github.com/alibaba/COLA</a></p><h2 id="大多数-MVC-或“DDD”架构的现有问题"><a href="#大多数-MVC-或“DDD”架构的现有问题" class="headerlink" title="大多数 MVC 或“DDD”架构的现有问题"></a>大多数 MVC 或“DDD”架构的现有问题</h2><p>目前我见过的大多数工程都是习惯使用以下的几种结构，</p><p><strong>MVC 架构图</strong></p><p>在前后端分离的时代，View 的作用可能被慢慢忘记了。目前大多数 MVC 架构的工作过程是 Controller 完成请求参数的接收和校验，Service 层接受 Controller 层传入的数据并调用数据访问对象来完成业务逻辑，复杂一些的应用架构可能会使用 RPC 来调用其他服务来进行数据交互。这个架构看上去可能没什么问题，大家似乎都是这样做的。下面我先介绍上述应用架构或大多数同学的使用的问题。</p><h3 id="常见业务逻辑代码"><a href="#常见业务逻辑代码" class="headerlink" title="常见业务逻辑代码"></a>常见业务逻辑代码</h3><p>在改善之前我们的业务逻辑中残渣着这样的业务逻辑，我以“IM 发送消息”这个业务的 Mybatis 简单示例（真实情况可能更复杂），</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(String content, Long sessionID, Long senderID, Long reciverID)</span> &#123;<br>  <span class="hljs-comment">// 调用第三方内容安全对发送内容进行检查</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">isSafe</span> <span class="hljs-operator">=</span> contentChecker.check(content, Sence.CHAT);<br>  <br>  <span class="hljs-comment">// 检查用户是否存在</span><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByID(senderID);<br>  <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;对应用户不存在&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 检查会话是否存在</span><br>  <span class="hljs-type">ChatSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> chatSessionMapper.selectByID(sessionID);<br>  <span class="hljs-keyword">if</span> (session == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;对应会话不存在&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 检查会话是否被关闭（封禁或对方拉黑）</span><br>  <span class="hljs-keyword">if</span> (session.isClosed()) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;检查是否被对方封禁&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 更新 session 未读计数 </span><br>  <span class="hljs-type">SessionMeta</span> <span class="hljs-variable">sessionMeta</span> <span class="hljs-operator">=</span> sessionMetaMapper.selectByID(session.getID());<br>        sessionMeta.setUnreadCount(sessionMeta.getUnreadCount());<br>  <span class="hljs-keyword">if</span> (!sessionMetaMapper.updateByID(sessionMeta))&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;保存数据异常&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 消息存库</span><br>        <span class="hljs-type">SessionMsg</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionMsg</span>();<br>        msg.setID(idGenerator.get());<br>  msg.setSessionID(sessionID);<br>        msg.setSender(senderID);<br>  msg.setReciver(reciverID);<br>        msg.setContent(content);<br>  <span class="hljs-keyword">if</span> (!sessionMsgMapper.updateByID(sessionMeta))&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;保存数据异常&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 投递 Kafka，让消费者推送 WebSocket</span><br>  <span class="hljs-type">KafkaMsg</span> <span class="hljs-variable">kafkaMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaMsg</span>();<br>  pushMsg.setTopic(TOPIC_PREFIX + userID);<br>  pushMsg.setMsg(content);<br>  kafkaMsgSender.push(kafkaMsg);<br>  <br>  <span class="hljs-comment">// 推送微信通知</span><br>  <span class="hljs-type">WechatSubMsg</span> <span class="hljs-variable">subMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatSubMsg</span>();<br>  subMsg.setUserID(reciverID);<br>  subMsg.setMsg(content);<br>  wechatApiProvider.pushMsg(subMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送消息成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>不仅仅是 Spring Boot-Mybatis 这样一种情况，事实上大多数 Web 开发都存在这样一种编码习惯</p></blockquote><p>相信不少同学的业务逻辑像我上面那样编写，那这样写有什么问题呢？对于小的项目或者小的业务功能时可能并无不妥，但是随着需求的变更，这里面可能会插入越来越多的业务逻辑，这样不断增长的“克苏鲁”将会造成以下问题。</p><h3 id="业务逻辑“消失”，认知成本升高"><a href="#业务逻辑“消失”，认知成本升高" class="headerlink" title="业务逻辑“消失”，认知成本升高"></a>业务逻辑“消失”，认知成本升高</h3><p>正如你所看见的，你不仔细阅读我的分支条件、数据库操作、与Kafka或者推送系统的交互，你很难明白我这一段代码的逻辑流程。我们都知道大多数业务逻辑都是存在一个业务流程的，但是当我们落实到编码的时候，业务逻辑被掩盖了。其他同学想要通过阅读我们的代码来搞懂我们的业务逻辑变得不那么容易，也就是“认知成本”变得很高。</p><h3 id="技术复杂度✖️业务复杂度"><a href="#技术复杂度✖️业务复杂度" class="headerlink" title="技术复杂度✖️业务复杂度"></a>技术复杂度✖️业务复杂度</h3><p>在当前后端的发展形势，我们的代码不仅要处理业务需求，还要处理如 MyBatis 等开发框架，Kafka等中间件，微服务架构等架构带来的技术复杂性。两个复杂性会导致我们的后端可维护性随着需求的变更快速下降。同时还会给项目带来技术风险，假如 MyBatis 框架出现了重大漏洞，要将 MyBatis 换为 Spring Data JDBC，那么我们的业务逻辑代码也需要变更，造成我们的技术变更成本高昂，无法快速应对技术风险！</p><h2 id="结构化分解与组合方法模式"><a href="#结构化分解与组合方法模式" class="headerlink" title="结构化分解与组合方法模式"></a>结构化分解与组合方法模式</h2><p>正如我们在面向过程语言中</p><h2 id="反转-Domain-和-Infrastructure-的依赖关系"><a href="#反转-Domain-和-Infrastructure-的依赖关系" class="headerlink" title="反转 Domain 和 Infrastructure 的依赖关系"></a>反转 Domain 和 Infrastructure 的依赖关系</h2><h3 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h3><p>大多数应用架构会选择这样的分层，</p><ul><li>domain</li><li>infrastructure</li></ul><p>大多数应用架构采取的依赖关系如下所示，</p><p>Controller -&gt; Service -&gt; DAO</p><p>Facade -&gt; Application -&gt; Domain -&gt; Infrastructure</p><p>事实上这种依赖方向是存在问题，主要的问题在于领域对象层 Domain 依赖于基础设施层，会使我们的业务代码夹杂着访问基础设施的代码，无法将技术与业务复杂度分离。</p><h3 id="COLA-的做法"><a href="#COLA-的做法" class="headerlink" title="COLA 的做法"></a>COLA 的做法</h3><p>COLA 通过在 Domain 中引入一个 <strong>Gateway</strong> 的概念，</p><ul><li>domain<ul><li>gateway</li></ul></li><li>infrastructure<ul><li>gatewayImpl</li></ul></li></ul><p>对于上面的代码，我们使用 Gateway 来重构一下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(String content, Long sessionID, Long senderID, Long reciverID)</span> &#123;<br>  <span class="hljs-comment">// 调用第三方内容安全对发送内容进行检查</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">isSafe</span> <span class="hljs-operator">=</span> contentChecker.check(content, Sence.CHAT);<br>  <br>  <span class="hljs-comment">// 检查用户是否存在</span><br>  <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByID(senderID);<br>  <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;对应用户不存在&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 检查会话是否存在</span><br>  <span class="hljs-type">ChatSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> chatSessionMapper.selectByID(sessionID);<br>  <span class="hljs-keyword">if</span> (session == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;对应会话不存在&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 检查会话是否被关闭（封禁或对方拉黑）</span><br>  <span class="hljs-keyword">if</span> (session.isClosed()) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;检查是否被对方封禁&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 更新 session 未读计数 </span><br>  <span class="hljs-type">SessionMeta</span> <span class="hljs-variable">sessionMeta</span> <span class="hljs-operator">=</span> sessionMetaMapper.selectByID(session.getID());<br>        sessionMeta.setUnreadCount(sessionMeta.getUnreadCount());<br>  <span class="hljs-keyword">if</span> (!sessionMetaMapper.updateByID(sessionMeta))&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;保存数据异常&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 消息存库</span><br>        <span class="hljs-type">SessionMsg</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionMsg</span>();<br>        msg.setID(idGenerator.get());<br>  msg.setSessionID(sessionID);<br>        msg.setSender(senderID);<br>  msg.setReciver(reciverID);<br>        msg.setContent(content);<br>  <span class="hljs-keyword">if</span> (!sessionMsgMapper.updateByID(sessionMeta))&#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BizException</span>(<span class="hljs-string">&quot;保存数据异常&quot;</span>);<br>        &#125;<br>  <br>  <span class="hljs-comment">// 投递 Kafka，让消费者推送 WebSocket</span><br>  <span class="hljs-type">KafkaMsg</span> <span class="hljs-variable">kafkaMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaMsg</span>();<br>  pushMsg.setTopic(TOPIC_PREFIX + userID);<br>  pushMsg.setMsg(content);<br>  kafkaMsgSender.push(kafkaMsg);<br>  <br>  <span class="hljs-comment">// 推送微信通知</span><br>  <span class="hljs-type">WechatSubMsg</span> <span class="hljs-variable">subMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatSubMsg</span>();<br>  subMsg.setUserID(reciverID);<br>  subMsg.setMsg(content);<br>  wechatApiProvider.pushMsg(subMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;发送消息成功&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="将贫血模型过渡到充血模型"><a href="#将贫血模型过渡到充血模型" class="headerlink" title="将贫血模型过渡到充血模型"></a>将贫血模型过渡到充血模型</h2><h2 id="使用边界上下文"><a href="#使用边界上下文" class="headerlink" title="使用边界上下文"></a>使用边界上下文</h2><h2 id="改善示例"><a href="#改善示例" class="headerlink" title="改善示例"></a>改善示例</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
